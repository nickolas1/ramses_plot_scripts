from __future__ import division

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import matplotlib.colors as col
import matplotlib.cm as cm
import gc
import sys
import h5py
from astropy import constants as const
from astropy import units as u
from astropy.io import ascii
from os.path import expanduser
from matplotlib import rcParams


"""
usage: python plot_CO_filament_finder_image_turbgrav.py <snap> <axis>
"""


# import ramses helper functions and get figure directory
homedir = expanduser('~')+'/'

# import ramses helper functions and get figure directory
sys.path.append(homedir+'pythonhelpers/ramses/')
from ramses_helpers import *
#mpl.rc_file(homedir+'pythonhelpers/ramses/matplotlibrc')

# set some fonts
fontdir = homedir+'Documents/astronomy/macfontsforpython/'
tfm = fm.FontProperties( # tick font
    fname=fontdir+'Gotham-Book.ttf', size=13)
lfm = fm.FontProperties( # label font main
    fname=fontdir+'Gotham-BookItalic.ttf', size=12) 

rcParams['xtick.direction'] = 'out'

outdir = get_output_path(homedir)
outdir = './'

snapstr = str(int(sys.argv[1])).zfill(5)
infoname = 'reduced_'+snapstr+'/info_'+snapstr+'.txt'
(boxlen, unit_l) = get_boxsize(infoname)

snap = int(sys.argv[1])
axis = int(sys.argv[2])



imshowmap = 'nickmapVD2'
#imshowmap = 'bone_r'

"""
this data is generated by making a surface density map taking into account only
gas that is between 10^3 and 10^4.5 cm^-3. to convert to a crude approximation 
of a C18O map, use
David S. Meier and Jean L. Turner ApJ 551:687 2001 equation 2

N(H2)C18O = 2.42e14 cm^-2 [H2]/[C18O] * exp(5.27/Tex)/(exp(5.27/Tex)-1) IC18O K km/s
[H2]/[C18O] = 2.94e6

so first convert g cm^-2 to cm^-2 using mu = 2.33, then convert to ICO using Tex=10 K
"""
cdmin = 10**-3.3 
cdmax = 10**-1.5
cdmin = 0
cdmax = 5

fileprefix = 'reduced_'+str(snap).zfill(5)+'/'
sinkname = fileprefix+'sink_'+str(snap).zfill(5)+'.out'


file = fileprefix+'surface_density_CO_'+str(axis)+'.hdf5'
if os.path.exists(file):
    print snap,file
    f = h5py.File(file, 'r')
    sd = f['surface_density_CO']
    sd = 10**np.array(sd)  # convert to linear units
    print np.mean(sd),np.max(sd)
    sd /= (2.33 * const.m_p.cgs.value) # convert to number density
    print np.mean(sd),np.max(sd)
    sd /= (2.42e14 * 2.94e6) # non-temperature factors of IC18O conversion
    sd /= (np.exp(5.27/10) / (np.exp(5.27/10) - 1)) # temperature part
    print np.mean(sd),np.max(sd)
    fig = plt.figure(figsize = (sd.shape[0]/200, sd.shape[1]/200), dpi=200)
    ax = fig.add_axes([0., 0., 1., 1.])
    ax.imshow(sd,
          interpolation = 'nearest',
          origin = 'lower',
          vmin = cdmin,
          vmax = cdmax,
          cmap = imshowmap)
    
    # see if we have any sink particles to plot
    try:
        with open(sinkname): 
            sinks = get_sinks(sinkname)
            if len(sinks) > 0:
                # figure out the size of the sinks in units of 0-1
                #mincell = 1.0/2**lmax
                #sinkrad = 1.5 * mincell
        
                sinkpos = sinks[:,2:5]
                sinkpos[:] /= boxlen # shrink to 0-1 in all dimensions
                # get projected positions
                keep = np.array([1,1,1])
                keep[axis] = 0
                keep = np.array(keep, dtype=bool)
                sinkpos = sinkpos[:,keep]
    
                # restrict to same region as density plot
                #ledge = cntr[0] - wd/2
                #bedge = cntr[2] - ht/2
                #sinkpos[:] -= np.array([ledge, bedge])
                # convert to imshow scale
                #sinkpos *= res[1] / wd
                #sinkrad *= res[1] / wd
                sinkpos *= sd.shape[0]
                print sinkpos      
                sinkmass = sinks[:,1]
                # color by the log of mass. the minimum that we plot is 0.1 Msun,
                # max is a few hundred.
                mmin = np.log10(1)
                mmax = np.log10(100)
                sinkmap = cm.get_cmap('nickmapSink')
                sinkcolors = sinkmap((np.log10(sinkmass) - mmin) / (mmax - mmin))     
                ax.autoscale(False)
                #for s in xrange(len(sinks)):
                #    ax.add_artist(Circle((sinkpos[s,0],sinkpos[s,1]),sinkrad,fc=csink))
                ax.scatter(sinkpos[:,0],sinkpos[:,1],marker='.',s=9,facecolor=sinkcolors,lw=0)              
    except IOError:
        pass     
    
                    
    """
       xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
       add a colorbar
       xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    """
    ax2 = fig.add_axes([0.45, 0.8, 0.4, 0.015])
    a = np.outer(np.arange(cdmin, cdmax, (cdmax - cdmin)/255), np.ones(10)).T
    ax2.imshow(a, 
        aspect = 'auto',
        interpolation = 'nearest',
        origin = 'lower',
        vmin = cdmin,
        vmax = cdmax,
        cmap = imshowmap,
        extent = [cdmin, cdmax, 0, 1])
    ax2.set_frame_on(False)
    ax2.axes.get_yaxis().set_visible(False)
    ax2.xaxis.set_ticks(np.arange(cdmin, cdmax+1, 1.0))
    ax2.set_xlabel(r'$\mathdefault{I_{C^{18}O}}$ / K km s$\mathdefault{^{-1}}$', fontproperties = tfm, size=18, color='0.15')
    
    set_ticks(ax2, '0.15')
    for label in ax2.get_xticklabels() + ax2.get_yticklabels():
        label.set_fontproperties(tfm)


    """
       xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
       add a scalebar
       xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    """
    ax3 = fig.add_axes([0.65, 0.825, 0.2, 0.0015])
    a = np.outer(np.ones(100)*.8*cdmax, np.ones(10)).T
    ax3.imshow(a, 
        aspect = 'auto',
        interpolation = 'nearest',
        origin = 'lower',
        vmin = cdmin,
        vmax = cdmax,
        cmap = imshowmap,
        extent = [cdmin, cdmax, 0, 1])
    ax3.set_frame_on(False)
    ax3.axes.get_yaxis().set_visible(False)
    ax3.axes.get_xaxis().set_visible(False)
    ax3.text(0.1, 0.85, r'2pc', transform = ax3.transAxes,
        va = 'bottom', ha = 'left', fontproperties = tfm, color='0.15', snap = False)
    set_ticks(ax3, '0.15')
    for label in ax3.get_xticklabels() + ax3.get_yticklabels():
        label.set_fontproperties(tfm)
        

     
    ax.autoscale(False)
    # define a rectangle by drawing a line on a filament and choosing a width
    rectdata = ascii.read(fileprefix+'filaments'+str(axis)+'_'+str(snap).zfill(5)+'.txt')
    for fil in rectdata:
        leftpoint = np.array([fil[1], fil[2]])
        rightpoint = np.array([fil[3], fil[4]])
        width = fil[5]
        vector = rightpoint - leftpoint
        orthovec = (-vector[1], vector[0])
        orthovec /= np.linalg.norm(orthovec)
        x = (leftpoint[0], rightpoint[0])
        y = (leftpoint[1], rightpoint[1])
        ul = leftpoint + orthovec * width/2
        ll = leftpoint - orthovec * width/2
        ur = rightpoint + orthovec * width/2
        lr = rightpoint - orthovec * width/2
        rectangle = np.transpose([ul, ll, lr, ur, ul])
        #ax.plot(x,y,lw=.3,color=cred)
        ax.plot(rectangle[0]*sd.shape[0], rectangle[1]*sd.shape[0], lw=.7,color='m', solid_joinstyle='miter')    
    
    # turn off axes
    ax.set_frame_on(False)
    ax.axes.get_yaxis().set_visible(False)
    ax.axes.get_xaxis().set_visible(False)
                    
    framesdir = 'finderimage'+str(axis)+'/'
    if not os.path.exists(framesdir):
        os.makedirs(framesdir)

    framename = framesdir+'finderimage'+str(axis)+'_frame_'+str(snap).zfill(5)
    plt.savefig(framename+'.png', dpi = 200)
    plt.savefig(framename+'.pdf')
    
    f.close() 
    plt.close() 
    del(f)
    del(sd)
    gc.collect()

